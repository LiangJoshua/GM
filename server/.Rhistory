champs %>%
select(Team) %>%
distinct()
#Plotting points of champion teams in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = PTS, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Points Scored")
#Plotting field goal percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FGP, color = Team, shape = Win)) +
geom_hline(yintercept = 0.50, size = 0.25, color = "gray95") +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Field Goal Percentage")
#Plotting three point percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = TPP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Three Point Percentage")
#Plotting free throw percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FTP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Free Throw Percentage")
ggplot(data = fullPostSeasons,
aes(x = Home, y = PTS, fill = Win)) +
geom_violin() +
theme_dark() +
scale_fill_brewer(palette = "Paired") +
ylab("Points Scored")
#Does home court advantage really lead to more points scored?
PTS_HomeVsAway_test <- aov(data = fullPostSeasons, formula = PTS ~ Home)
kable(summary(PTS_HomeVsAway_test)[[1]])
#The ANOVA test indicates that there is a significant difference in points
#scored per game for when playing at home vs. playing away.
#Building a model to predict Wins and Losses for both champs and runners up.
#Fist start with a full model that has all potentially meaningful variables,
#and work backwards from there to minimize AIC.
WL <- glm(data = fullPostSeasons_train,
formula = Win ~ Home + PTS + FGP + TPP +
FTP + TRB + STL + BLK + TOV + PF,
family = "binomial")
# Use backwards step-wise regression to build highly predictive model without overfitting
backWL <- step(WL, trace = 0)
summary(backWL)
#Interestingly, backwards step-wise logistic regression eliminated the home court variable
#from the model to minimize AIC. So, even though the ANOVA test of PTS ~ Home indicated that
#there is a significant difference in mean points scored per game for home court vs. away court,
#when modeling actual wins, home court advantage was not as important.
#Now, lets make predictions from the test data set using the model built from the training data,
#then calculate predictive performance using the confusionMatrix() function from the caret
#package.
preds <- predict(backWL, fullPostSeasons_test, type = "response") %>%
round()
preds_table <- table(preds, fullPostSeasons_test$Win)
confusionMatrix(preds_table)
# What does it take to be an NBA championship team? Classification Model?
library(tidyverse)
library(caret)
champs <- read_csv(file = "champs.csv")
runners <- read_csv(file = "runners.csv")
# colnames(champs)
champs %>%
select(Team) %>%
distinct()
#Fix naming problem with Warriorrs and 'Heat'. Turn Win and Home into factors.
#Do the same with the runners data.
champs <- champs %>%
mutate(Team = ifelse(Team == "Warriorrs","Warriors",Team)) %>%
mutate(Team = ifelse(Team == "'Heat'","Heat",Team)) %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home)) %>%
mutate(X = as.numeric(X))
runners <- runners %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home)) %>%
rename(X = Y)
#Combine champs and runners with a row bind, then split 75-25
#into a training and test set respectively using an anti-join
fullPostSeasons <- bind_rows(champs,runners) %>%
mutate(id = 1:(nrow(champs)*2))
fullPostSeasons_train <- sample_frac(fullPostSeasons,0.75)
fullPostSeasons_test <- anti_join(fullPostSeasons,fullPostSeasons_train,by = 'id')
#Check the team names once more to make sure no duplicates or misspellings.
champs %>%
select(Team) %>%
distinct()
#Plotting points of champion teams in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = PTS, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Points Scored")
#Plotting field goal percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FGP, color = Team, shape = Win)) +
geom_hline(yintercept = 0.50, size = 0.25, color = "gray95") +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Field Goal Percentage")
#Plotting three point percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = TPP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Three Point Percentage")
#Plotting free throw percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FTP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Free Throw Percentage")
ggplot(data = fullPostSeasons,
aes(x = Home, y = PTS, fill = Win)) +
geom_violin() +
theme_dark() +
scale_fill_brewer(palette = "Paired") +
ylab("Points Scored")
#Does home court advantage really lead to more points scored?
PTS_HomeVsAway_test <- aov(data = fullPostSeasons, formula = PTS ~ Home)
kable(summary(PTS_HomeVsAway_test)[[1]])
#The ANOVA test indicates that there is a significant difference in points
#scored per game for when playing at home vs. playing away.
#Building a model to predict Wins and Losses for both champs and runners up.
#Fist start with a full model that has all potentially meaningful variables,
#and work backwards from there to minimize AIC.
WL <- glm(data = fullPostSeasons_train,
formula = Win ~ Home + PTS + FGP + TPP +
FTP + TRB + STL + BLK + TOV + PF,
family = "binomial")
# Use backwards step-wise regression to build highly predictive model without overfitting
backWL <- step(WL, trace = 0)
summary(backWL)
#Interestingly, backwards step-wise logistic regression eliminated the home court variable
#from the model to minimize AIC. So, even though the ANOVA test of PTS ~ Home indicated that
#there is a significant difference in mean points scored per game for home court vs. away court,
#when modeling actual wins, home court advantage was not as important.
#Now, lets make predictions from the test data set using the model built from the training data,
#then calculate predictive performance using the confusionMatrix() function from the caret
#package.
preds <- predict(backWL, fullPostSeasons_test, type = "response") %>%
round()
preds_table <- table(preds, fullPostSeasons_test$Win)
confusionMatrix(preds_table)
# What does it take to be an NBA championship team? Classification Model?
library(tidyverse)
library(caret)
champs <- read_csv(file = "champs_2010.csv")
runners <- read_csv(file = "runners_2010.csv")
# colnames(champs)
champs %>%
select(Team) %>%
distinct()
#Fix naming problem with Warriorrs and 'Heat'. Turn Win and Home into factors.
#Do the same with the runners data.
champs <- champs %>%
mutate(Team = ifelse(Team == "Warriorrs","Warriors",Team)) %>%
mutate(Team = ifelse(Team == "'Heat'","Heat",Team)) %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home)) %>%
mutate(X = as.numeric(X))
runners <- runners %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home)) %>%
rename(X = Y)
#Combine champs and runners with a row bind, then split 75-25
#into a training and test set respectively using an anti-join
fullPostSeasons <- bind_rows(champs,runners) %>%
mutate(id = 1:(nrow(champs)*2))
fullPostSeasons_train <- sample_frac(fullPostSeasons,0.75)
fullPostSeasons_test <- anti_join(fullPostSeasons,fullPostSeasons_train,by = 'id')
#Check the team names once more to make sure no duplicates or misspellings.
champs %>%
select(Team) %>%
distinct()
#Plotting points of champion teams in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = PTS, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Points Scored")
#Plotting field goal percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FGP, color = Team, shape = Win)) +
geom_hline(yintercept = 0.50, size = 0.25, color = "gray95") +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Field Goal Percentage")
#Plotting three point percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = TPP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Three Point Percentage")
#Plotting free throw percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FTP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Free Throw Percentage")
ggplot(data = fullPostSeasons,
aes(x = Home, y = PTS, fill = Win)) +
geom_violin() +
theme_dark() +
scale_fill_brewer(palette = "Paired") +
ylab("Points Scored")
#Does home court advantage really lead to more points scored?
PTS_HomeVsAway_test <- aov(data = fullPostSeasons, formula = PTS ~ Home)
kable(summary(PTS_HomeVsAway_test)[[1]])
#The ANOVA test indicates that there is a significant difference in points
#scored per game for when playing at home vs. playing away.
#Building a model to predict Wins and Losses for both champs and runners up.
#Fist start with a full model that has all potentially meaningful variables,
#and work backwards from there to minimize AIC.
WL <- glm(data = fullPostSeasons_train,
formula = Win ~ Home + PTS + FGP + TPP +
FTP + TRB + STL + BLK + TOV + PF,
family = "binomial")
# Use backwards step-wise regression to build highly predictive model without overfitting
backWL <- step(WL, trace = 0)
summary(backWL)
#Interestingly, backwards step-wise logistic regression eliminated the home court variable
#from the model to minimize AIC. So, even though the ANOVA test of PTS ~ Home indicated that
#there is a significant difference in mean points scored per game for home court vs. away court,
#when modeling actual wins, home court advantage was not as important.
#Now, lets make predictions from the test data set using the model built from the training data,
#then calculate predictive performance using the confusionMatrix() function from the caret
#package.
preds <- predict(backWL, fullPostSeasons_test, type = "response") %>%
round()
preds_table <- table(preds, fullPostSeasons_test$Win)
confusionMatrix(preds_table)
#Analysis on 3 points in NBA Finals
setwd('~/desktop/github/gm/server')
suppressMessages(library(tidyverse))
averages <- read.csv(file = 'data/champs_and_runner_ups_series_averages.csv')
eight_to_eightytwo  <- ggplot(data = filter(averages,Year < 1983),aes(x = Year, y = TP,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
scale_x_continuous(breaks=seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
eighty_to_seventeen  <- ggplot(data = averages,aes(x = Year, y = TP,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
scale_x_continuous(breaks=seq(1980, 2017, 1)) +
ylab('Average Three Point Field Goals') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
ggtitle("NBA Finals, 1980-2017")
eight_to_eightytwo
eighty_to_seventeen
points <- ggplot(data = averages, aes(x = Year, y = PTS, color = Status)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
ggtitle('Points Per Game') +
theme(legend.position="none") +
ylab('Points')
tp <- ggplot(data = averages, aes(x = Year, y = TP, color = Status)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
ggtitle("3's Per Game") +
ylab("3's") +
theme(legend.position="none")
percentage_of_points_threes <- averages %>% mutate(Percentage_of_Points_Threes = 3*TP/PTS*100)
ppts_threes <- ggplot(data = percentage_of_points_threes, aes(x = Year, y = Percentage_of_Points_Threes, color = Status)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
ggtitle("% of Points From 3's") +
ylab('%') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
theme(legend.position="none")
tpp <- ggplot(data = averages, aes(x = Year, y = TPP, color = Status)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
theme(legend.position="none") +
ggtitle('3PT %') +
ylab('%')
tpa <- ggplot(data = averages, aes(x = Year, y = TPA, color = Status)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
theme(legend.position="bottom")+
ggtitle('3 Attempts Per Game') +
ylab('Attempts')
percentage_of_attempts_threes <- averages %>% mutate(perc_attempts = TPA/FGA*100)
perc_attempts_threes <- ggplot(data = percentage_of_attempts_threes, aes(x = Year, y = perc_attempts, color = Status)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
ggtitle("% of FG Attempts, 3's") +
ylab('%') +
theme(legend.position="none")
suppressMessages(require(gridExtra))
grid.arrange(points,tp,ppts_threes,tpp,tpa,perc_attempts_threes,ncol=3)
by_decade <- read.csv(file = 'data/stats_by_decade.csv')
scoring_by_decade <- ggplot(data = by_decade,aes(x = Years, y = Average_PTS,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
ggtitle('Average Points Scored') +
ylab("Points") +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
theme(legend.position="none")
tp_by_decade <- ggplot(data = by_decade,aes(x = Years, y = Average_Made_Threes,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
ggtitle("3's Per Game") +
theme(legend.position="none") +
ylab("3's")
tpa_by_decade <- ggplot(data = by_decade,aes(x = Years, y = Average_Attempted_Threes,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
ggtitle('3 Attempts Per Game') +
theme(legend.position="none") +
ylab("Attempts")
tpp_by_decade <- ggplot(data = by_decade,aes(x = Years, y = Three_Point_Percentage,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
ggtitle('3PT %') +
theme(legend.position="none") +
ylab("%")
per_points_tp_by_decade <- ggplot(data = by_decade,aes(x = Years, y = Percent_Points_Three,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
ggtitle("% of Points from 3's") +
theme(legend.position="bottom") +
ylab("%")
per_attempts_by_decade <- ggplot(data = by_decade,aes(x = Years, y = Percentage_of_FGAs_TPs,fill = Status)) +
geom_bar(stat = 'identity',position = 'dodge') +
theme(axis.text.x = element_text(angle=90,hjust = 1,vjust = 1)) +
ggtitle("% of FG Attempts, 3's") +
theme(legend.position="none") +
ylab("%")
grid.arrange(scoring_by_decade,tp_by_decade,per_points_tp_by_decade,tpp_by_decade,tpa_by_decade,per_attempts_by_decade,ncol=3)
# What does it take to be an NBA championship team? Classification Model?
library(tidyverse)
library(caret)
champs <- read_csv(file = "data/champs_2010.csv")
runners <- read_csv(file = "data/runners_2010.csv")
# colnames(champs)
champs %>%
select(Team) %>%
distinct()
#Fix naming problem with Warriorrs and 'Heat'. Turn Win and Home into factors.
#Do the same with the runners data.
champs <- champs %>%
mutate(Team = ifelse(Team == "Warriorrs","Warriors",Team)) %>%
mutate(Team = ifelse(Team == "'Heat'","Heat",Team)) %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home)) %>%
mutate(X = as.numeric(X))
runners <- runners %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home)) %>%
rename(X = Y)
#Combine champs and runners with a row bind, then split 75-25
#into a training and test set respectively using an anti-join
fullPostSeasons <- bind_rows(champs,runners) %>%
mutate(id = 1:(nrow(champs)*2))
fullPostSeasons_train <- sample_frac(fullPostSeasons,0.75)
fullPostSeasons_test <- anti_join(fullPostSeasons,fullPostSeasons_train,by = 'id')
#Check the team names once more to make sure no duplicates or misspellings.
champs %>%
select(Team) %>%
distinct()
#Plotting points of champion teams in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = PTS, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Points Scored")
#Plotting field goal percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FGP, color = Team, shape = Win)) +
geom_hline(yintercept = 0.50, size = 0.25, color = "gray95") +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Field Goal Percentage")
#Plotting three point percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = TPP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Three Point Percentage")
#Plotting free throw percentage of champion team in each game since 1980.
ggplot(data = champs,
aes(x = Year, y = FTP, color = Team, shape = Win)) +
geom_point(size = 1) +
scale_x_continuous(breaks = 1980:2017) +
scale_y_continuous(breaks = seq(0,1,by = 0.05), limits = c(0,1)) +
theme_dark() +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(size = 3, angle = 45),
axis.text.y = element_text(size = 6, angle = 45)) +
facet_wrap(~ Home, labeller = "label_both") +
ylab("Free Throw Percentage")
ggplot(data = fullPostSeasons,
aes(x = Home, y = PTS, fill = Win)) +
geom_violin() +
theme_dark() +
scale_fill_brewer(palette = "Paired") +
ylab("Points Scored")
#Does home court advantage really lead to more points scored?
PTS_HomeVsAway_test <- aov(data = fullPostSeasons, formula = PTS ~ Home)
kable(summary(PTS_HomeVsAway_test)[[1]])
#The ANOVA test indicates that there is a significant difference in points
#scored per game for when playing at home vs. playing away.
#Building a model to predict Wins and Losses for both champs and runners up.
#Fist start with a full model that has all potentially meaningful variables,
#and work backwards from there to minimize AIC.
WL <- glm(data = fullPostSeasons_train,
formula = Win ~ Home + PTS + FGP + TPP +
FTP + TRB + STL + BLK + TOV + PF,
family = "binomial")
# Use backwards step-wise regression to build highly predictive model without overfitting
backWL <- step(WL, trace = 0)
summary(backWL)
#Interestingly, backwards step-wise logistic regression eliminated the home court variable
#from the model to minimize AIC. So, even though the ANOVA test of PTS ~ Home indicated that
#there is a significant difference in mean points scored per game for home court vs. away court,
#when modeling actual wins, home court advantage was not as important.
#Now, lets make predictions from the test data set using the model built from the training data,
#then calculate predictive performance using the confusionMatrix() function from the caret
#package.
preds <- predict(backWL, fullPostSeasons_test, type = "response") %>%
round()
preds_table <- table(preds, fullPostSeasons_test$Win)
confusionMatrix(preds_table)
