{"map":"{\"version\":3,\"sources\":[\"/Users/faith_chau/Desktop/CS161/GM/static/src/App.js\",\"/Users/faith_chau/Desktop/CS161/GM/static/src/DraftingPage.js\",\"/Users/faith_chau/Desktop/CS161/GM/static/src/serviceWorker.js\",\"/Users/faith_chau/Desktop/CS161/GM/static/src/index.js\"],\"names\":[\"App\",\"Component\",\"state\",\"data\",\"react_default\",\"a\",\"createElement\",\"className\",\"AppBar_default\",\"position\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"wOAyCeA,GCpCYC,EAAAA,qNDMzBC,MAAQ,CACNC,KAAM,yHAYN,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,mBAhBPR,EAAAA,YEEES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,EAAAA,EAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\n// import axios from \\\"axios\\\";\\n\\n// import logo from \\\"./logo.svg\\\";\\n\\nimport AppBar from \\\"@material-ui/core/AppBar\\\";\\nimport \\\"./App.css\\\";\\nimport \\\"./DraftingPage\\\";\\nimport DraftingPage from \\\"./DraftingPage\\\";\\n\\nclass App extends Component {\\n  state = {\\n    data: \\\"\\\"\\n  };\\n\\n  componentDidMount() {\\n    // axios.get(\\\"http://127.0.0.1:5000/\\\").then(res => {\\n    //   this.setState({\\n    //     data: res.data\\n    //   });\\n    // });\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"App-header\\\">\\n        <AppBar position=\\\"static\\\" />\\n      </div>\\n    );\\n  }\\n}\\nconst draftedPlayers = [\\n  [\\\"Lebrom James\\\", \\\"/LebronJames.png\\\"],\\n  [\\\"Stephen Curry\\\", \\\"/StephenCurry.png\\\"],\\n  [\\\"Jimmy Butler\\\", \\\"/JimmyButler.png\\\"],\\n  [\\\"Kemba Walker\\\", \\\"/KembaWalker.png\\\"],\\n  [\\\"Luka Doncic\\\", \\\"/LukaDoncic.png\\\"],\\n  [\\\"Lou Williams\\\", \\\"/LouWilliams.png\\\"],\\n  [\\\"James Harden\\\", \\\"/JamesHarden.png\\\"],\\n  [\\\"Kyrie Irving\\\", \\\"KyrieIrving.png\\\"]\\n];\\nexport default App;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport Grid from \\\"@material-ui/core/Grid\\\";\\n\\nimport \\\"./App.css\\\";\\n\\nclass DraftingPage extends Component {\\n  state = {\\n    draftedPlayers: [],\\n    playerLists: [],\\n    userProfile: []\\n  };\\n\\n  initialize = this.initialize.bind(this);\\n\\n  initialize() {\\n    let drafted = [];\\n    drafted.push(\\n      <p style={{ fontSize: 50, color: \\\"blue\\\" }}>Currently Drafted</p>\\n    );\\n    this.props.draftedPlayers.forEach(player => {\\n      drafted.push(<img className=\\\"ProfilePic\\\" src={player[1]} alt=\\\"logo\\\" />);\\n      drafted.push(<p>{player[0]}</p>);\\n    });\\n\\n    let profile = [];\\n    profile.push(\\n      <div>\\n        <img\\n          key=\\\"NBA\\\"\\n          src={\\\"/NBA.jpg\\\"}\\n          alt=\\\"logo\\\"\\n          style={{ width: 114, height: 75 }}\\n        />\\n      </div>\\n    );\\n    profile.push(\\n      <div>\\n        <img className=\\\"UserPic\\\" src={this.props.user[1]} alt=\\\"logo\\\" />\\n      </div>\\n    );\\n    profile.push(<p className=\\\"username\\\">{this.props.user[0]}</p>);\\n    profile.push(\\n      <p style={{ fontSize: 20 }}>Win rate: {this.props.winRate}</p>\\n    );\\n\\n    let players = [];\\n    // players.push(<p style={{ fontSize: 50, color: \\\"orangered\\\" }}>Players</p>);\\n    // this.props.playerLists.forEach(player => {\\n    //   players.push(<p>{player}</p>)\\n    // });\\n    let length = this.props.playerLists.length;\\n    if (length % 2 === 0) {\\n      for (let i = 0; i < length; i += 2) {\\n        players.push(\\n          <Grid container direction=\\\"row\\\" justify=\\\"space-evenly\\\">\\n            <div>\\n              <img\\n                className=\\\"ProfilePic\\\"\\n                src={this.props.playerLists[i][1]}\\n                alt=\\\"logo\\\"\\n              />\\n              <p>{this.props.playerLists[i][0]}</p>\\n            </div>\\n            <div>\\n              <img\\n                className=\\\"ProfilePic\\\"\\n                src={this.props.playerLists[i + 1][1]}\\n                alt=\\\"logo\\\"\\n              />\\n              <p>{this.props.playerLists[i + 1][0]}</p>\\n            </div>\\n          </Grid>\\n        );\\n      }\\n    }\\n\\n    this.setState({\\n      draftedPlayers: drafted,\\n      userProfile: profile,\\n      playerLists: players\\n    });\\n  }\\n\\n  componentDidMount() {\\n    this.initialize();\\n  }\\n\\n  render() {\\n    let { draftedPlayers, userProfile, playerLists } = this.state;\\n\\n    return (\\n      <div>\\n        <Grid container direction=\\\"column\\\">\\n          <div style={{ textAlign: \\\"center\\\", color: \\\"orangered\\\" }}>\\n            <h1>Draft Players</h1>\\n            {playerLists}\\n          </div>\\n          <div>\\n            <Grid container direction=\\\"row\\\">\\n              <div className=\\\"DraftingPage\\\">{userProfile}</div>\\n              <div className=\\\"Playerlist\\\">{draftedPlayers}</div>\\n            </Grid>\\n          </div>\\n        </Grid>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default DraftingPage;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\n// import axios from \\\"axios\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{128:function(n,e,t){\"use strict\";t.r(e);var o=t(0),a=t.n(o),r=t(44),c=t.n(r),i=(t(52),t(17)),s=t(18),u=t(22),l=t(20),d=t(21),p=t(46),m=t.n(p),w=(t(30),t(19)),h=t(23),f=t.n(h),v=(o.Component,function(n){function e(){var n,t;Object(i.a)(this,e);for(var o=arguments.length,a=new Array(o),r=0;r<o;r++)a[r]=arguments[r];return(t=Object(u.a)(this,(n=Object(l.a)(e)).call.apply(n,[this].concat(a)))).state={data:\"\"},t}return Object(d.a)(e,n),Object(s.a)(e,[{key:\"componentDidMount\",value:function(){}},{key:\"render\",value:function(){return a.a.createElement(\"div\",{className:\"App-header\"},a.a.createElement(m.a,{position:\"static\"}))}}]),e}(o.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(n){n.unregister()})},30:function(n,e,t){},47:function(n,e,t){n.exports=t(128)},52:function(n,e,t){}},[[47,1,2]]]);","extractedComments":[]}